{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ap75r\\\\OneDrive\\\\Desktop\\\\Proj\\\\sepm project\\\\client\\\\src\\\\contexts\\\\ProgressContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { auth, db } from '../firebase';\nimport { doc, setDoc, getDoc } from 'firebase/firestore';\nimport { RANKS, ACHIEVEMENTS, NOTIFICATIONS } from '../constants/badges';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProgressContext = /*#__PURE__*/createContext();\nexport function useProgress() {\n  _s();\n  return useContext(ProgressContext);\n}\n_s(useProgress, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function ProgressProvider({\n  children\n}) {\n  _s2();\n  const [userProgress, setUserProgress] = useState({\n    modulesCompleted: 0,\n    completedModules: [],\n    quizzesTaken: 0,\n    averageScore: 0,\n    totalPoints: 0,\n    totalTimeSpent: 0,\n    badges: [],\n    achievements: [],\n    currentRank: RANKS.WOOD,\n    recentActivities: []\n  });\n  const [notifications, setNotifications] = useState([]);\n  useEffect(() => {\n    const loadProgress = async () => {\n      const user = auth.currentUser;\n      if (user) {\n        try {\n          const docRef = doc(db, 'progress', user.uid);\n          const docSnap = await getDoc(docRef);\n          if (docSnap.exists()) {\n            setUserProgress(docSnap.data());\n          }\n        } catch (error) {\n          console.error('Error loading progress:', error);\n        }\n      }\n    };\n    loadProgress();\n  }, []);\n  useEffect(() => {\n    if (auth.currentUser) {\n      localStorage.setItem('userProgress', JSON.stringify(userProgress));\n      syncProgressWithFirebase();\n    }\n  }, [userProgress]);\n  const syncProgressWithFirebase = async () => {\n    const user = auth.currentUser;\n    if (user) {\n      try {\n        const docRef = doc(db, 'progress', user.uid);\n        await setDoc(docRef, userProgress);\n      } catch (error) {\n        console.error('Error syncing progress:', error);\n      }\n    }\n  };\n  const resetProgress = () => {\n    setUserProgress({\n      modulesCompleted: 0,\n      completedModules: [],\n      quizzesTaken: 0,\n      averageScore: 0,\n      totalPoints: 0,\n      totalTimeSpent: 0,\n      badges: [],\n      achievements: [],\n      currentRank: RANKS.WOOD,\n      recentActivities: []\n    });\n  };\n  const addNotification = (type, message) => {\n    const newNotification = {\n      id: Date.now(),\n      type,\n      message,\n      timestamp: new Date()\n    };\n    setNotifications(prev => [newNotification, ...prev]);\n    setTimeout(() => {\n      setNotifications(prev => prev.filter(n => n.id !== newNotification.id));\n    }, 5000);\n  };\n  const checkRankProgress = points => {\n    const ranks = Object.values(RANKS);\n    for (let i = ranks.length - 1; i >= 0; i--) {\n      if (points >= ranks[i].minPoints && userProgress.currentRank.name !== ranks[i].name) {\n        setUserProgress(prev => ({\n          ...prev,\n          currentRank: ranks[i]\n        }));\n        addNotification(NOTIFICATIONS.RANK_UP, `Congratulations! You've reached ${ranks[i].name} rank!`);\n        break;\n      }\n    }\n  };\n  const checkAchievements = () => {\n    const {\n      modulesCompleted,\n      quizzesTaken,\n      averageScore,\n      completedModules\n    } = userProgress;\n    const unlockedAchievements = [];\n\n    // First Steps\n    if (modulesCompleted >= 1 && !hasAchievement(ACHIEVEMENTS.FIRST_STEPS.id)) {\n      unlockedAchievements.push(ACHIEVEMENTS.FIRST_STEPS);\n    }\n\n    // Quick Learner\n    if (modulesCompleted >= 3 && !hasAchievement(ACHIEVEMENTS.QUICK_LEARNER.id)) {\n      unlockedAchievements.push(ACHIEVEMENTS.QUICK_LEARNER);\n    }\n\n    // Knowledge Seeker\n    if (completedModules.length === 7 && !hasAchievement(ACHIEVEMENTS.KNOWLEDGE_SEEKER.id)) {\n      unlockedAchievements.push(ACHIEVEMENTS.KNOWLEDGE_SEEKER);\n    }\n\n    // Quiz Master\n    if (quizzesTaken >= 5 && averageScore >= 90 && !hasAchievement(ACHIEVEMENTS.QUIZ_MASTER.id)) {\n      unlockedAchievements.push(ACHIEVEMENTS.QUIZ_MASTER);\n    }\n    unlockedAchievements.forEach(achievement => {\n      addAchievement(achievement);\n    });\n  };\n  const hasAchievement = achievementId => {\n    return userProgress.achievements.some(a => a.id === achievementId);\n  };\n  const addAchievement = achievement => {\n    setUserProgress(prev => {\n      const newPoints = prev.totalPoints + achievement.points;\n      checkRankProgress(newPoints);\n      return {\n        ...prev,\n        achievements: [...prev.achievements, achievement],\n        totalPoints: newPoints\n      };\n    });\n    addNotification(NOTIFICATIONS.ACHIEVEMENT_UNLOCKED, `Achievement Unlocked: ${achievement.name} (+${achievement.points} points)`);\n  };\n  const updateModulesCompleted = moduleId => {\n    if (!userProgress.completedModules.includes(moduleId)) {\n      setUserProgress(prev => ({\n        ...prev,\n        modulesCompleted: prev.modulesCompleted + 1,\n        completedModules: [...prev.completedModules, moduleId]\n      }));\n      checkAchievements();\n    }\n  };\n  const updateTimeSpent = minutes => {\n    setUserProgress(prev => ({\n      ...prev,\n      totalTimeSpent: prev.totalTimeSpent + minutes\n    }));\n  };\n  const updateQuizStats = score => {\n    setUserProgress(prev => {\n      const newQuizzesTaken = prev.quizzesTaken + 1;\n      const newAverageScore = (prev.averageScore * prev.quizzesTaken + score) / newQuizzesTaken;\n      if (score === 100 && !hasAchievement(ACHIEVEMENTS.PERFECT_SCORE.id)) {\n        addAchievement(ACHIEVEMENTS.PERFECT_SCORE);\n      }\n      return {\n        ...prev,\n        quizzesTaken: newQuizzesTaken,\n        averageScore: newAverageScore\n      };\n    });\n    checkAchievements();\n  };\n  const addPoints = (points, reason) => {\n    setUserProgress(prev => {\n      const newPoints = prev.totalPoints + points;\n      checkRankProgress(newPoints);\n      return {\n        ...prev,\n        totalPoints: newPoints\n      };\n    });\n    addActivity(`Earned ${points} points - ${reason}`);\n  };\n  const formatTime = minutes => {\n    const hours = Math.floor(minutes / 60);\n    const mins = minutes % 60;\n    return `${hours}h ${mins}m`;\n  };\n  const addActivity = activity => {\n    const newActivity = {\n      id: Date.now(),\n      description: activity,\n      timestamp: new Date()\n    };\n    setUserProgress(prev => ({\n      ...prev,\n      recentActivities: [newActivity, ...prev.recentActivities.slice(0, 9)]\n    }));\n  };\n  const value = {\n    userProgress,\n    notifications,\n    resetProgress,\n    updateModulesCompleted,\n    updateTimeSpent,\n    updateQuizStats,\n    addPoints,\n    formatTime,\n    addActivity,\n    hasAchievement,\n    checkAchievements\n  };\n  return /*#__PURE__*/_jsxDEV(ProgressContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 238,\n    columnNumber: 5\n  }, this);\n}\n_s2(ProgressProvider, \"ngvjwIjgN6kPRfIUaf+3Ie2eoZw=\");\n_c = ProgressProvider;\nvar _c;\n$RefreshReg$(_c, \"ProgressProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","auth","db","doc","setDoc","getDoc","RANKS","ACHIEVEMENTS","NOTIFICATIONS","jsxDEV","_jsxDEV","ProgressContext","useProgress","_s","ProgressProvider","children","_s2","userProgress","setUserProgress","modulesCompleted","completedModules","quizzesTaken","averageScore","totalPoints","totalTimeSpent","badges","achievements","currentRank","WOOD","recentActivities","notifications","setNotifications","loadProgress","user","currentUser","docRef","uid","docSnap","exists","data","error","console","localStorage","setItem","JSON","stringify","syncProgressWithFirebase","resetProgress","addNotification","type","message","newNotification","id","Date","now","timestamp","prev","setTimeout","filter","n","checkRankProgress","points","ranks","Object","values","i","length","minPoints","name","RANK_UP","checkAchievements","unlockedAchievements","hasAchievement","FIRST_STEPS","push","QUICK_LEARNER","KNOWLEDGE_SEEKER","QUIZ_MASTER","forEach","achievement","addAchievement","achievementId","some","a","newPoints","ACHIEVEMENT_UNLOCKED","updateModulesCompleted","moduleId","includes","updateTimeSpent","minutes","updateQuizStats","score","newQuizzesTaken","newAverageScore","PERFECT_SCORE","addPoints","reason","addActivity","formatTime","hours","Math","floor","mins","activity","newActivity","description","slice","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ap75r/OneDrive/Desktop/Proj/sepm project/client/src/contexts/ProgressContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { auth, db } from '../firebase';\nimport { doc, setDoc, getDoc } from 'firebase/firestore';\nimport { RANKS, ACHIEVEMENTS, NOTIFICATIONS } from '../constants/badges';\n\nconst ProgressContext = createContext();\n\nexport function useProgress() {\n  return useContext(ProgressContext);\n}\n\nexport function ProgressProvider({ children }) {\n  const [userProgress, setUserProgress] = useState({\n    modulesCompleted: 0,\n    completedModules: [],\n    quizzesTaken: 0,\n    averageScore: 0,\n    totalPoints: 0,\n    totalTimeSpent: 0,\n    badges: [],\n    achievements: [],\n    currentRank: RANKS.WOOD,\n    recentActivities: []\n  });\n\n  const [notifications, setNotifications] = useState([]);\n\n  useEffect(() => {\n    const loadProgress = async () => {\n      const user = auth.currentUser;\n      if (user) {\n        try {\n          const docRef = doc(db, 'progress', user.uid);\n          const docSnap = await getDoc(docRef);\n          if (docSnap.exists()) {\n            setUserProgress(docSnap.data());\n          }\n        } catch (error) {\n          console.error('Error loading progress:', error);\n        }\n      }\n    };\n    loadProgress();\n  }, []);\n\n  useEffect(() => {\n    if (auth.currentUser) {\n      localStorage.setItem('userProgress', JSON.stringify(userProgress));\n      syncProgressWithFirebase();\n    }\n  }, [userProgress]);\n\n  const syncProgressWithFirebase = async () => {\n    const user = auth.currentUser;\n    if (user) {\n      try {\n        const docRef = doc(db, 'progress', user.uid);\n        await setDoc(docRef, userProgress);\n      } catch (error) {\n        console.error('Error syncing progress:', error);\n      }\n    }\n  };\n\n  const resetProgress = () => {\n    setUserProgress({\n      modulesCompleted: 0,\n      completedModules: [],\n      quizzesTaken: 0,\n      averageScore: 0,\n      totalPoints: 0,\n      totalTimeSpent: 0,\n      badges: [],\n      achievements: [],\n      currentRank: RANKS.WOOD,\n      recentActivities: []\n    });\n  };\n\n  const addNotification = (type, message) => {\n    const newNotification = {\n      id: Date.now(),\n      type,\n      message,\n      timestamp: new Date()\n    };\n    setNotifications(prev => [newNotification, ...prev]);\n    setTimeout(() => {\n      setNotifications(prev => prev.filter(n => n.id !== newNotification.id));\n    }, 5000);\n  };\n\n  const checkRankProgress = (points) => {\n    const ranks = Object.values(RANKS);\n    for (let i = ranks.length - 1; i >= 0; i--) {\n      if (points >= ranks[i].minPoints && userProgress.currentRank.name !== ranks[i].name) {\n        setUserProgress(prev => ({\n          ...prev,\n          currentRank: ranks[i]\n        }));\n        addNotification(NOTIFICATIONS.RANK_UP, `Congratulations! You've reached ${ranks[i].name} rank!`);\n        break;\n      }\n    }\n  };\n\n  const checkAchievements = () => {\n    const { modulesCompleted, quizzesTaken, averageScore, completedModules } = userProgress;\n    const unlockedAchievements = [];\n\n    // First Steps\n    if (modulesCompleted >= 1 && !hasAchievement(ACHIEVEMENTS.FIRST_STEPS.id)) {\n      unlockedAchievements.push(ACHIEVEMENTS.FIRST_STEPS);\n    }\n\n    // Quick Learner\n    if (modulesCompleted >= 3 && !hasAchievement(ACHIEVEMENTS.QUICK_LEARNER.id)) {\n      unlockedAchievements.push(ACHIEVEMENTS.QUICK_LEARNER);\n    }\n\n    // Knowledge Seeker\n    if (completedModules.length === 7 && !hasAchievement(ACHIEVEMENTS.KNOWLEDGE_SEEKER.id)) {\n      unlockedAchievements.push(ACHIEVEMENTS.KNOWLEDGE_SEEKER);\n    }\n\n    // Quiz Master\n    if (quizzesTaken >= 5 && averageScore >= 90 && !hasAchievement(ACHIEVEMENTS.QUIZ_MASTER.id)) {\n      unlockedAchievements.push(ACHIEVEMENTS.QUIZ_MASTER);\n    }\n\n    unlockedAchievements.forEach(achievement => {\n      addAchievement(achievement);\n    });\n  };\n\n  const hasAchievement = (achievementId) => {\n    return userProgress.achievements.some(a => a.id === achievementId);\n  };\n\n  const addAchievement = (achievement) => {\n    setUserProgress(prev => {\n      const newPoints = prev.totalPoints + achievement.points;\n      checkRankProgress(newPoints);\n      \n      return {\n        ...prev,\n        achievements: [...prev.achievements, achievement],\n        totalPoints: newPoints\n      };\n    });\n    addNotification(\n      NOTIFICATIONS.ACHIEVEMENT_UNLOCKED,\n      `Achievement Unlocked: ${achievement.name} (+${achievement.points} points)`\n    );\n  };\n\n  const updateModulesCompleted = (moduleId) => {\n    if (!userProgress.completedModules.includes(moduleId)) {\n      setUserProgress(prev => ({\n        ...prev,\n        modulesCompleted: prev.modulesCompleted + 1,\n        completedModules: [...prev.completedModules, moduleId]\n      }));\n      checkAchievements();\n    }\n  };\n\n  const updateTimeSpent = (minutes) => {\n    setUserProgress(prev => ({\n      ...prev,\n      totalTimeSpent: prev.totalTimeSpent + minutes\n    }));\n  };\n\n  const updateQuizStats = (score) => {\n    setUserProgress(prev => {\n      const newQuizzesTaken = prev.quizzesTaken + 1;\n      const newAverageScore = ((prev.averageScore * prev.quizzesTaken) + score) / newQuizzesTaken;\n      \n      if (score === 100 && !hasAchievement(ACHIEVEMENTS.PERFECT_SCORE.id)) {\n        addAchievement(ACHIEVEMENTS.PERFECT_SCORE);\n      }\n\n      return {\n        ...prev,\n        quizzesTaken: newQuizzesTaken,\n        averageScore: newAverageScore\n      };\n    });\n    checkAchievements();\n  };\n\n  const addPoints = (points, reason) => {\n    setUserProgress(prev => {\n      const newPoints = prev.totalPoints + points;\n      checkRankProgress(newPoints);\n      return {\n        ...prev,\n        totalPoints: newPoints\n      };\n    });\n    addActivity(`Earned ${points} points - ${reason}`);\n  };\n\n  const formatTime = (minutes) => {\n    const hours = Math.floor(minutes / 60);\n    const mins = minutes % 60;\n    return `${hours}h ${mins}m`;\n  };\n\n  const addActivity = (activity) => {\n    const newActivity = {\n      id: Date.now(),\n      description: activity,\n      timestamp: new Date()\n    };\n    setUserProgress(prev => ({\n      ...prev,\n      recentActivities: [newActivity, ...prev.recentActivities.slice(0, 9)]\n    }));\n  };\n\n  const value = {\n    userProgress,\n    notifications,\n    resetProgress,\n    updateModulesCompleted,\n    updateTimeSpent,\n    updateQuizStats,\n    addPoints,\n    formatTime,\n    addActivity,\n    hasAchievement,\n    checkAchievements\n  };\n\n  return (\n    <ProgressContext.Provider value={value}>\n      {children}\n    </ProgressContext.Provider>\n  );\n} "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC7E,SAASC,IAAI,EAAEC,EAAE,QAAQ,aAAa;AACtC,SAASC,GAAG,EAAEC,MAAM,EAAEC,MAAM,QAAQ,oBAAoB;AACxD,SAASC,KAAK,EAAEC,YAAY,EAAEC,aAAa,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzE,MAAMC,eAAe,gBAAGd,aAAa,CAAC,CAAC;AAEvC,OAAO,SAASe,WAAWA,CAAA,EAAG;EAAAC,EAAA;EAC5B,OAAOf,UAAU,CAACa,eAAe,CAAC;AACpC;AAACE,EAAA,CAFeD,WAAW;AAI3B,OAAO,SAASE,gBAAgBA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,GAAA;EAC7C,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGnB,QAAQ,CAAC;IAC/CoB,gBAAgB,EAAE,CAAC;IACnBC,gBAAgB,EAAE,EAAE;IACpBC,YAAY,EAAE,CAAC;IACfC,YAAY,EAAE,CAAC;IACfC,WAAW,EAAE,CAAC;IACdC,cAAc,EAAE,CAAC;IACjBC,MAAM,EAAE,EAAE;IACVC,YAAY,EAAE,EAAE;IAChBC,WAAW,EAAErB,KAAK,CAACsB,IAAI;IACvBC,gBAAgB,EAAE;EACpB,CAAC,CAAC;EAEF,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGhC,QAAQ,CAAC,EAAE,CAAC;EAEtDC,SAAS,CAAC,MAAM;IACd,MAAMgC,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,MAAMC,IAAI,GAAGhC,IAAI,CAACiC,WAAW;MAC7B,IAAID,IAAI,EAAE;QACR,IAAI;UACF,MAAME,MAAM,GAAGhC,GAAG,CAACD,EAAE,EAAE,UAAU,EAAE+B,IAAI,CAACG,GAAG,CAAC;UAC5C,MAAMC,OAAO,GAAG,MAAMhC,MAAM,CAAC8B,MAAM,CAAC;UACpC,IAAIE,OAAO,CAACC,MAAM,CAAC,CAAC,EAAE;YACpBpB,eAAe,CAACmB,OAAO,CAACE,IAAI,CAAC,CAAC,CAAC;UACjC;QACF,CAAC,CAAC,OAAOC,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;QACjD;MACF;IACF,CAAC;IACDR,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAENhC,SAAS,CAAC,MAAM;IACd,IAAIC,IAAI,CAACiC,WAAW,EAAE;MACpBQ,YAAY,CAACC,OAAO,CAAC,cAAc,EAAEC,IAAI,CAACC,SAAS,CAAC5B,YAAY,CAAC,CAAC;MAClE6B,wBAAwB,CAAC,CAAC;IAC5B;EACF,CAAC,EAAE,CAAC7B,YAAY,CAAC,CAAC;EAElB,MAAM6B,wBAAwB,GAAG,MAAAA,CAAA,KAAY;IAC3C,MAAMb,IAAI,GAAGhC,IAAI,CAACiC,WAAW;IAC7B,IAAID,IAAI,EAAE;MACR,IAAI;QACF,MAAME,MAAM,GAAGhC,GAAG,CAACD,EAAE,EAAE,UAAU,EAAE+B,IAAI,CAACG,GAAG,CAAC;QAC5C,MAAMhC,MAAM,CAAC+B,MAAM,EAAElB,YAAY,CAAC;MACpC,CAAC,CAAC,OAAOuB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD;IACF;EACF,CAAC;EAED,MAAMO,aAAa,GAAGA,CAAA,KAAM;IAC1B7B,eAAe,CAAC;MACdC,gBAAgB,EAAE,CAAC;MACnBC,gBAAgB,EAAE,EAAE;MACpBC,YAAY,EAAE,CAAC;MACfC,YAAY,EAAE,CAAC;MACfC,WAAW,EAAE,CAAC;MACdC,cAAc,EAAE,CAAC;MACjBC,MAAM,EAAE,EAAE;MACVC,YAAY,EAAE,EAAE;MAChBC,WAAW,EAAErB,KAAK,CAACsB,IAAI;MACvBC,gBAAgB,EAAE;IACpB,CAAC,CAAC;EACJ,CAAC;EAED,MAAMmB,eAAe,GAAGA,CAACC,IAAI,EAAEC,OAAO,KAAK;IACzC,MAAMC,eAAe,GAAG;MACtBC,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;MACdL,IAAI;MACJC,OAAO;MACPK,SAAS,EAAE,IAAIF,IAAI,CAAC;IACtB,CAAC;IACDtB,gBAAgB,CAACyB,IAAI,IAAI,CAACL,eAAe,EAAE,GAAGK,IAAI,CAAC,CAAC;IACpDC,UAAU,CAAC,MAAM;MACf1B,gBAAgB,CAACyB,IAAI,IAAIA,IAAI,CAACE,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACP,EAAE,KAAKD,eAAe,CAACC,EAAE,CAAC,CAAC;IACzE,CAAC,EAAE,IAAI,CAAC;EACV,CAAC;EAED,MAAMQ,iBAAiB,GAAIC,MAAM,IAAK;IACpC,MAAMC,KAAK,GAAGC,MAAM,CAACC,MAAM,CAAC1D,KAAK,CAAC;IAClC,KAAK,IAAI2D,CAAC,GAAGH,KAAK,CAACI,MAAM,GAAG,CAAC,EAAED,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1C,IAAIJ,MAAM,IAAIC,KAAK,CAACG,CAAC,CAAC,CAACE,SAAS,IAAIlD,YAAY,CAACU,WAAW,CAACyC,IAAI,KAAKN,KAAK,CAACG,CAAC,CAAC,CAACG,IAAI,EAAE;QACnFlD,eAAe,CAACsC,IAAI,KAAK;UACvB,GAAGA,IAAI;UACP7B,WAAW,EAAEmC,KAAK,CAACG,CAAC;QACtB,CAAC,CAAC,CAAC;QACHjB,eAAe,CAACxC,aAAa,CAAC6D,OAAO,EAAE,mCAAmCP,KAAK,CAACG,CAAC,CAAC,CAACG,IAAI,QAAQ,CAAC;QAChG;MACF;IACF;EACF,CAAC;EAED,MAAME,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,MAAM;MAAEnD,gBAAgB;MAAEE,YAAY;MAAEC,YAAY;MAAEF;IAAiB,CAAC,GAAGH,YAAY;IACvF,MAAMsD,oBAAoB,GAAG,EAAE;;IAE/B;IACA,IAAIpD,gBAAgB,IAAI,CAAC,IAAI,CAACqD,cAAc,CAACjE,YAAY,CAACkE,WAAW,CAACrB,EAAE,CAAC,EAAE;MACzEmB,oBAAoB,CAACG,IAAI,CAACnE,YAAY,CAACkE,WAAW,CAAC;IACrD;;IAEA;IACA,IAAItD,gBAAgB,IAAI,CAAC,IAAI,CAACqD,cAAc,CAACjE,YAAY,CAACoE,aAAa,CAACvB,EAAE,CAAC,EAAE;MAC3EmB,oBAAoB,CAACG,IAAI,CAACnE,YAAY,CAACoE,aAAa,CAAC;IACvD;;IAEA;IACA,IAAIvD,gBAAgB,CAAC8C,MAAM,KAAK,CAAC,IAAI,CAACM,cAAc,CAACjE,YAAY,CAACqE,gBAAgB,CAACxB,EAAE,CAAC,EAAE;MACtFmB,oBAAoB,CAACG,IAAI,CAACnE,YAAY,CAACqE,gBAAgB,CAAC;IAC1D;;IAEA;IACA,IAAIvD,YAAY,IAAI,CAAC,IAAIC,YAAY,IAAI,EAAE,IAAI,CAACkD,cAAc,CAACjE,YAAY,CAACsE,WAAW,CAACzB,EAAE,CAAC,EAAE;MAC3FmB,oBAAoB,CAACG,IAAI,CAACnE,YAAY,CAACsE,WAAW,CAAC;IACrD;IAEAN,oBAAoB,CAACO,OAAO,CAACC,WAAW,IAAI;MAC1CC,cAAc,CAACD,WAAW,CAAC;IAC7B,CAAC,CAAC;EACJ,CAAC;EAED,MAAMP,cAAc,GAAIS,aAAa,IAAK;IACxC,OAAOhE,YAAY,CAACS,YAAY,CAACwD,IAAI,CAACC,CAAC,IAAIA,CAAC,CAAC/B,EAAE,KAAK6B,aAAa,CAAC;EACpE,CAAC;EAED,MAAMD,cAAc,GAAID,WAAW,IAAK;IACtC7D,eAAe,CAACsC,IAAI,IAAI;MACtB,MAAM4B,SAAS,GAAG5B,IAAI,CAACjC,WAAW,GAAGwD,WAAW,CAAClB,MAAM;MACvDD,iBAAiB,CAACwB,SAAS,CAAC;MAE5B,OAAO;QACL,GAAG5B,IAAI;QACP9B,YAAY,EAAE,CAAC,GAAG8B,IAAI,CAAC9B,YAAY,EAAEqD,WAAW,CAAC;QACjDxD,WAAW,EAAE6D;MACf,CAAC;IACH,CAAC,CAAC;IACFpC,eAAe,CACbxC,aAAa,CAAC6E,oBAAoB,EAClC,yBAAyBN,WAAW,CAACX,IAAI,MAAMW,WAAW,CAAClB,MAAM,UACnE,CAAC;EACH,CAAC;EAED,MAAMyB,sBAAsB,GAAIC,QAAQ,IAAK;IAC3C,IAAI,CAACtE,YAAY,CAACG,gBAAgB,CAACoE,QAAQ,CAACD,QAAQ,CAAC,EAAE;MACrDrE,eAAe,CAACsC,IAAI,KAAK;QACvB,GAAGA,IAAI;QACPrC,gBAAgB,EAAEqC,IAAI,CAACrC,gBAAgB,GAAG,CAAC;QAC3CC,gBAAgB,EAAE,CAAC,GAAGoC,IAAI,CAACpC,gBAAgB,EAAEmE,QAAQ;MACvD,CAAC,CAAC,CAAC;MACHjB,iBAAiB,CAAC,CAAC;IACrB;EACF,CAAC;EAED,MAAMmB,eAAe,GAAIC,OAAO,IAAK;IACnCxE,eAAe,CAACsC,IAAI,KAAK;MACvB,GAAGA,IAAI;MACPhC,cAAc,EAAEgC,IAAI,CAAChC,cAAc,GAAGkE;IACxC,CAAC,CAAC,CAAC;EACL,CAAC;EAED,MAAMC,eAAe,GAAIC,KAAK,IAAK;IACjC1E,eAAe,CAACsC,IAAI,IAAI;MACtB,MAAMqC,eAAe,GAAGrC,IAAI,CAACnC,YAAY,GAAG,CAAC;MAC7C,MAAMyE,eAAe,GAAG,CAAEtC,IAAI,CAAClC,YAAY,GAAGkC,IAAI,CAACnC,YAAY,GAAIuE,KAAK,IAAIC,eAAe;MAE3F,IAAID,KAAK,KAAK,GAAG,IAAI,CAACpB,cAAc,CAACjE,YAAY,CAACwF,aAAa,CAAC3C,EAAE,CAAC,EAAE;QACnE4B,cAAc,CAACzE,YAAY,CAACwF,aAAa,CAAC;MAC5C;MAEA,OAAO;QACL,GAAGvC,IAAI;QACPnC,YAAY,EAAEwE,eAAe;QAC7BvE,YAAY,EAAEwE;MAChB,CAAC;IACH,CAAC,CAAC;IACFxB,iBAAiB,CAAC,CAAC;EACrB,CAAC;EAED,MAAM0B,SAAS,GAAGA,CAACnC,MAAM,EAAEoC,MAAM,KAAK;IACpC/E,eAAe,CAACsC,IAAI,IAAI;MACtB,MAAM4B,SAAS,GAAG5B,IAAI,CAACjC,WAAW,GAAGsC,MAAM;MAC3CD,iBAAiB,CAACwB,SAAS,CAAC;MAC5B,OAAO;QACL,GAAG5B,IAAI;QACPjC,WAAW,EAAE6D;MACf,CAAC;IACH,CAAC,CAAC;IACFc,WAAW,CAAC,UAAUrC,MAAM,aAAaoC,MAAM,EAAE,CAAC;EACpD,CAAC;EAED,MAAME,UAAU,GAAIT,OAAO,IAAK;IAC9B,MAAMU,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACZ,OAAO,GAAG,EAAE,CAAC;IACtC,MAAMa,IAAI,GAAGb,OAAO,GAAG,EAAE;IACzB,OAAO,GAAGU,KAAK,KAAKG,IAAI,GAAG;EAC7B,CAAC;EAED,MAAML,WAAW,GAAIM,QAAQ,IAAK;IAChC,MAAMC,WAAW,GAAG;MAClBrD,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;MACdoD,WAAW,EAAEF,QAAQ;MACrBjD,SAAS,EAAE,IAAIF,IAAI,CAAC;IACtB,CAAC;IACDnC,eAAe,CAACsC,IAAI,KAAK;MACvB,GAAGA,IAAI;MACP3B,gBAAgB,EAAE,CAAC4E,WAAW,EAAE,GAAGjD,IAAI,CAAC3B,gBAAgB,CAAC8E,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;IACtE,CAAC,CAAC,CAAC;EACL,CAAC;EAED,MAAMC,KAAK,GAAG;IACZ3F,YAAY;IACZa,aAAa;IACbiB,aAAa;IACbuC,sBAAsB;IACtBG,eAAe;IACfE,eAAe;IACfK,SAAS;IACTG,UAAU;IACVD,WAAW;IACX1B,cAAc;IACdF;EACF,CAAC;EAED,oBACE5D,OAAA,CAACC,eAAe,CAACkG,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAA7F,QAAA,EACpCA;EAAQ;IAAA+F,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACe,CAAC;AAE/B;AAACjG,GAAA,CAtOeF,gBAAgB;AAAAoG,EAAA,GAAhBpG,gBAAgB;AAAA,IAAAoG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}