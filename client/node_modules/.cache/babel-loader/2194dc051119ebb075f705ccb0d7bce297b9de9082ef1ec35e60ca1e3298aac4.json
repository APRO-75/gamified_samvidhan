{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ap75r\\\\OneDrive\\\\Desktop\\\\Proj\\\\sepm project\\\\client\\\\src\\\\contexts\\\\ProgressContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useAuth } from './AuthContext';\nimport { db } from '../firebase';\nimport { doc, setDoc, getDoc } from 'firebase/firestore';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProgressContext = /*#__PURE__*/createContext();\nexport function useProgress() {\n  _s();\n  return useContext(ProgressContext);\n}\n_s(useProgress, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function ProgressProvider({\n  children\n}) {\n  _s2();\n  const {\n    currentUser\n  } = useAuth();\n  const [userProgress, setUserProgress] = useState({\n    modulesCompleted: 0,\n    completedModules: [],\n    quizzesTaken: 0,\n    averageScore: 0,\n    totalPoints: 0,\n    totalTimeSpent: 0,\n    badges: [],\n    recentActivities: []\n  });\n\n  // Sync progress with Firebase\n  const syncProgressWithFirebase = async progress => {\n    if (!currentUser) return;\n    try {\n      const userRef = doc(db, 'leaderboard', currentUser.uid);\n      await setDoc(userRef, {\n        email: currentUser.email,\n        name: currentUser.displayName,\n        totalPoints: progress.totalPoints,\n        modulesCompleted: progress.modulesCompleted,\n        quizzesTaken: progress.quizzesTaken,\n        averageScore: progress.averageScore,\n        totalTimeSpent: progress.totalTimeSpent,\n        lastUpdated: new Date().toISOString()\n      }, {\n        merge: true\n      });\n    } catch (error) {\n      console.error('Error syncing progress with Firebase:', error);\n    }\n  };\n\n  // Reset progress\n  const resetProgress = async () => {\n    const newProgress = {\n      modulesCompleted: 0,\n      completedModules: [],\n      quizzesTaken: 0,\n      averageScore: 0,\n      totalPoints: 0,\n      totalTimeSpent: 0,\n      badges: [],\n      recentActivities: []\n    };\n    setUserProgress(newProgress);\n\n    // Clear localStorage\n    if (currentUser) {\n      localStorage.removeItem(`progress_${currentUser.uid}`);\n      // Also reset Firebase data\n      await syncProgressWithFirebase(newProgress);\n    }\n  };\n\n  // Update modules completed\n  const updateModulesCompleted = async moduleId => {\n    setUserProgress(prev => {\n      const completedModules = prev.completedModules || [];\n      if (!completedModules.includes(moduleId)) {\n        completedModules.push(moduleId);\n      }\n      const newProgress = {\n        ...prev,\n        completedModules,\n        modulesCompleted: completedModules.length\n      };\n\n      // Sync with Firebase\n      syncProgressWithFirebase(newProgress);\n      return newProgress;\n    });\n  };\n\n  // Update time spent\n  const updateTimeSpent = async additionalSeconds => {\n    if (!additionalSeconds || additionalSeconds <= 0) return;\n    setUserProgress(prev => {\n      const newProgress = {\n        ...prev,\n        totalTimeSpent: (prev.totalTimeSpent || 0) + additionalSeconds\n      };\n\n      // Sync with Firebase\n      syncProgressWithFirebase(newProgress);\n      return newProgress;\n    });\n  };\n\n  // Update quiz statistics\n  const updateQuizStats = async score => {\n    setUserProgress(prev => {\n      const newQuizCount = prev.quizzesTaken + 1;\n      const newAverageScore = Math.round((prev.averageScore * prev.quizzesTaken + score) / newQuizCount);\n      const newProgress = {\n        ...prev,\n        quizzesTaken: newQuizCount,\n        averageScore: newAverageScore\n      };\n\n      // Sync with Firebase\n      syncProgressWithFirebase(newProgress);\n      return newProgress;\n    });\n  };\n\n  // Add points\n  const addPoints = async points => {\n    setUserProgress(prev => {\n      const newProgress = {\n        ...prev,\n        totalPoints: prev.totalPoints + points\n      };\n\n      // Sync with Firebase\n      syncProgressWithFirebase(newProgress);\n      return newProgress;\n    });\n  };\n\n  // Format time for display\n  const formatTimeSpent = totalSeconds => {\n    if (!totalSeconds) return '0m';\n    const hours = Math.floor(totalSeconds / 3600);\n    const minutes = Math.floor(totalSeconds % 3600 / 60);\n    if (hours > 0) {\n      return `${hours}h ${minutes}m`;\n    }\n    return `${minutes}m`;\n  };\n\n  // Add activity\n  const addActivity = activity => {\n    if (activity.type === 'learning_time') {\n      const timeString = formatTimeSpent(activity.timeSpent);\n      activity.title = `Spent ${timeString} learning`;\n    }\n    setUserProgress(prev => ({\n      ...prev,\n      recentActivities: [activity, ...prev.recentActivities].slice(0, 10)\n    }));\n  };\n\n  // Load progress from Firebase and localStorage when component mounts or user changes\n  useEffect(() => {\n    const loadProgress = async () => {\n      if (!currentUser) return;\n      try {\n        // Try to load from Firebase first\n        const userRef = doc(db, 'leaderboard', currentUser.uid);\n        const userDoc = await getDoc(userRef);\n\n        // Then load from localStorage\n        const savedProgress = localStorage.getItem(`progress_${currentUser.uid}`);\n        let localProgress = savedProgress ? JSON.parse(savedProgress) : null;\n        if (userDoc.exists()) {\n          const firebaseData = userDoc.data();\n          // Merge Firebase data with local progress\n          localProgress = {\n            ...localProgress,\n            totalPoints: firebaseData.totalPoints || 0,\n            modulesCompleted: firebaseData.modulesCompleted || 0,\n            quizzesTaken: firebaseData.quizzesTaken || 0,\n            averageScore: firebaseData.averageScore || 0,\n            totalTimeSpent: firebaseData.totalTimeSpent || 0\n          };\n        }\n        if (localProgress) {\n          setUserProgress({\n            modulesCompleted: localProgress.modulesCompleted || 0,\n            completedModules: localProgress.completedModules || [],\n            quizzesTaken: localProgress.quizzesTaken || 0,\n            averageScore: localProgress.averageScore || 0,\n            totalPoints: localProgress.totalPoints || 0,\n            totalTimeSpent: localProgress.totalTimeSpent || 0,\n            badges: localProgress.badges || [],\n            recentActivities: localProgress.recentActivities || []\n          });\n        }\n      } catch (error) {\n        console.error('Error loading progress:', error);\n        // If there's an error, try to load from localStorage only\n        const savedProgress = localStorage.getItem(`progress_${currentUser.uid}`);\n        if (savedProgress) {\n          setUserProgress(JSON.parse(savedProgress));\n        }\n      }\n    };\n    loadProgress();\n  }, [currentUser]);\n\n  // Save progress to localStorage whenever it changes\n  useEffect(() => {\n    if (currentUser) {\n      localStorage.setItem(`progress_${currentUser.uid}`, JSON.stringify(userProgress));\n    }\n  }, [userProgress, currentUser]);\n  const value = {\n    userProgress,\n    resetProgress,\n    updateModulesCompleted,\n    updateQuizStats,\n    addPoints,\n    addActivity,\n    updateTimeSpent,\n    formatTimeSpent\n  };\n  return /*#__PURE__*/_jsxDEV(ProgressContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 239,\n    columnNumber: 5\n  }, this);\n}\n_s2(ProgressProvider, \"+OvRRmF7Ug2eafsY8fH4OBniomg=\", false, function () {\n  return [useAuth];\n});\n_c = ProgressProvider;\nvar _c;\n$RefreshReg$(_c, \"ProgressProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useAuth","db","doc","setDoc","getDoc","jsxDEV","_jsxDEV","ProgressContext","useProgress","_s","ProgressProvider","children","_s2","currentUser","userProgress","setUserProgress","modulesCompleted","completedModules","quizzesTaken","averageScore","totalPoints","totalTimeSpent","badges","recentActivities","syncProgressWithFirebase","progress","userRef","uid","email","name","displayName","lastUpdated","Date","toISOString","merge","error","console","resetProgress","newProgress","localStorage","removeItem","updateModulesCompleted","moduleId","prev","includes","push","length","updateTimeSpent","additionalSeconds","updateQuizStats","score","newQuizCount","newAverageScore","Math","round","addPoints","points","formatTimeSpent","totalSeconds","hours","floor","minutes","addActivity","activity","type","timeString","timeSpent","title","slice","loadProgress","userDoc","savedProgress","getItem","localProgress","JSON","parse","exists","firebaseData","data","setItem","stringify","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ap75r/OneDrive/Desktop/Proj/sepm project/client/src/contexts/ProgressContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { useAuth } from './AuthContext';\r\nimport { db } from '../firebase';\r\nimport { doc, setDoc, getDoc } from 'firebase/firestore';\r\n\r\nconst ProgressContext = createContext();\r\n\r\nexport function useProgress() {\r\n  return useContext(ProgressContext);\r\n}\r\n\r\nexport function ProgressProvider({ children }) {\r\n  const { currentUser } = useAuth();\r\n  const [userProgress, setUserProgress] = useState({\r\n    modulesCompleted: 0,\r\n    completedModules: [],\r\n    quizzesTaken: 0,\r\n    averageScore: 0,\r\n    totalPoints: 0,\r\n    totalTimeSpent: 0,\r\n    badges: [],\r\n    recentActivities: []\r\n  });\r\n\r\n  // Sync progress with Firebase\r\n  const syncProgressWithFirebase = async (progress) => {\r\n    if (!currentUser) return;\r\n\r\n    try {\r\n      const userRef = doc(db, 'leaderboard', currentUser.uid);\r\n      await setDoc(userRef, {\r\n        email: currentUser.email,\r\n        name: currentUser.displayName,\r\n        totalPoints: progress.totalPoints,\r\n        modulesCompleted: progress.modulesCompleted,\r\n        quizzesTaken: progress.quizzesTaken,\r\n        averageScore: progress.averageScore,\r\n        totalTimeSpent: progress.totalTimeSpent,\r\n        lastUpdated: new Date().toISOString()\r\n      }, { merge: true });\r\n    } catch (error) {\r\n      console.error('Error syncing progress with Firebase:', error);\r\n    }\r\n  };\r\n\r\n  // Reset progress\r\n  const resetProgress = async () => {\r\n    const newProgress = {\r\n      modulesCompleted: 0,\r\n      completedModules: [],\r\n      quizzesTaken: 0,\r\n      averageScore: 0,\r\n      totalPoints: 0,\r\n      totalTimeSpent: 0,\r\n      badges: [],\r\n      recentActivities: []\r\n    };\r\n    \r\n    setUserProgress(newProgress);\r\n    \r\n    // Clear localStorage\r\n    if (currentUser) {\r\n      localStorage.removeItem(`progress_${currentUser.uid}`);\r\n      // Also reset Firebase data\r\n      await syncProgressWithFirebase(newProgress);\r\n    }\r\n  };\r\n\r\n  // Update modules completed\r\n  const updateModulesCompleted = async (moduleId) => {\r\n    setUserProgress(prev => {\r\n      const completedModules = prev.completedModules || [];\r\n      if (!completedModules.includes(moduleId)) {\r\n        completedModules.push(moduleId);\r\n      }\r\n      const newProgress = {\r\n        ...prev,\r\n        completedModules,\r\n        modulesCompleted: completedModules.length\r\n      };\r\n      \r\n      // Sync with Firebase\r\n      syncProgressWithFirebase(newProgress);\r\n      \r\n      return newProgress;\r\n    });\r\n  };\r\n\r\n  // Update time spent\r\n  const updateTimeSpent = async (additionalSeconds) => {\r\n    if (!additionalSeconds || additionalSeconds <= 0) return;\r\n    \r\n    setUserProgress(prev => {\r\n      const newProgress = {\r\n        ...prev,\r\n        totalTimeSpent: (prev.totalTimeSpent || 0) + additionalSeconds\r\n      };\r\n      \r\n      // Sync with Firebase\r\n      syncProgressWithFirebase(newProgress);\r\n      \r\n      return newProgress;\r\n    });\r\n  };\r\n\r\n  // Update quiz statistics\r\n  const updateQuizStats = async (score) => {\r\n    setUserProgress(prev => {\r\n      const newQuizCount = prev.quizzesTaken + 1;\r\n      const newAverageScore = Math.round(\r\n        ((prev.averageScore * prev.quizzesTaken) + score) / newQuizCount\r\n      );\r\n      \r\n      const newProgress = {\r\n        ...prev,\r\n        quizzesTaken: newQuizCount,\r\n        averageScore: newAverageScore\r\n      };\r\n      \r\n      // Sync with Firebase\r\n      syncProgressWithFirebase(newProgress);\r\n      \r\n      return newProgress;\r\n    });\r\n  };\r\n\r\n  // Add points\r\n  const addPoints = async (points) => {\r\n    setUserProgress(prev => {\r\n      const newProgress = {\r\n        ...prev,\r\n        totalPoints: prev.totalPoints + points\r\n      };\r\n      \r\n      // Sync with Firebase\r\n      syncProgressWithFirebase(newProgress);\r\n      \r\n      return newProgress;\r\n    });\r\n  };\r\n\r\n  // Format time for display\r\n  const formatTimeSpent = (totalSeconds) => {\r\n    if (!totalSeconds) return '0m';\r\n    \r\n    const hours = Math.floor(totalSeconds / 3600);\r\n    const minutes = Math.floor((totalSeconds % 3600) / 60);\r\n    \r\n    if (hours > 0) {\r\n      return `${hours}h ${minutes}m`;\r\n    }\r\n    return `${minutes}m`;\r\n  };\r\n\r\n  // Add activity\r\n  const addActivity = (activity) => {\r\n    if (activity.type === 'learning_time') {\r\n      const timeString = formatTimeSpent(activity.timeSpent);\r\n      activity.title = `Spent ${timeString} learning`;\r\n    }\r\n    \r\n    setUserProgress(prev => ({\r\n      ...prev,\r\n      recentActivities: [activity, ...prev.recentActivities].slice(0, 10)\r\n    }));\r\n  };\r\n\r\n  // Load progress from Firebase and localStorage when component mounts or user changes\r\n  useEffect(() => {\r\n    const loadProgress = async () => {\r\n      if (!currentUser) return;\r\n\r\n      try {\r\n        // Try to load from Firebase first\r\n        const userRef = doc(db, 'leaderboard', currentUser.uid);\r\n        const userDoc = await getDoc(userRef);\r\n        \r\n        // Then load from localStorage\r\n        const savedProgress = localStorage.getItem(`progress_${currentUser.uid}`);\r\n        let localProgress = savedProgress ? JSON.parse(savedProgress) : null;\r\n\r\n        if (userDoc.exists()) {\r\n          const firebaseData = userDoc.data();\r\n          // Merge Firebase data with local progress\r\n          localProgress = {\r\n            ...localProgress,\r\n            totalPoints: firebaseData.totalPoints || 0,\r\n            modulesCompleted: firebaseData.modulesCompleted || 0,\r\n            quizzesTaken: firebaseData.quizzesTaken || 0,\r\n            averageScore: firebaseData.averageScore || 0,\r\n            totalTimeSpent: firebaseData.totalTimeSpent || 0\r\n          };\r\n        }\r\n\r\n        if (localProgress) {\r\n          setUserProgress({\r\n            modulesCompleted: localProgress.modulesCompleted || 0,\r\n            completedModules: localProgress.completedModules || [],\r\n            quizzesTaken: localProgress.quizzesTaken || 0,\r\n            averageScore: localProgress.averageScore || 0,\r\n            totalPoints: localProgress.totalPoints || 0,\r\n            totalTimeSpent: localProgress.totalTimeSpent || 0,\r\n            badges: localProgress.badges || [],\r\n            recentActivities: localProgress.recentActivities || []\r\n          });\r\n        }\r\n      } catch (error) {\r\n        console.error('Error loading progress:', error);\r\n        // If there's an error, try to load from localStorage only\r\n        const savedProgress = localStorage.getItem(`progress_${currentUser.uid}`);\r\n        if (savedProgress) {\r\n          setUserProgress(JSON.parse(savedProgress));\r\n        }\r\n      }\r\n    };\r\n\r\n    loadProgress();\r\n  }, [currentUser]);\r\n\r\n  // Save progress to localStorage whenever it changes\r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      localStorage.setItem(`progress_${currentUser.uid}`, JSON.stringify(userProgress));\r\n    }\r\n  }, [userProgress, currentUser]);\r\n\r\n  const value = {\r\n    userProgress,\r\n    resetProgress,\r\n    updateModulesCompleted,\r\n    updateQuizStats,\r\n    addPoints,\r\n    addActivity,\r\n    updateTimeSpent,\r\n    formatTimeSpent\r\n  };\r\n\r\n  return (\r\n    <ProgressContext.Provider value={value}>\r\n      {children}\r\n    </ProgressContext.Provider>\r\n  );\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}