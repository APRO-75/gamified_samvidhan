{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ap75r\\\\OneDrive\\\\Desktop\\\\Proj\\\\sepm project\\\\client\\\\src\\\\contexts\\\\ProgressContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useAuth } from './AuthContext';\nimport { db } from '../firebase';\nimport { doc, getDoc, setDoc } from 'firebase/firestore';\nimport { RANKS, ACHIEVEMENTS, NOTIFICATIONS } from '../constants/badges';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProgressContext = /*#__PURE__*/createContext();\nexport function useProgress() {\n  _s();\n  return useContext(ProgressContext);\n}\n_s(useProgress, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function ProgressProvider({\n  children\n}) {\n  _s2();\n  const [userProgress, setUserProgress] = useState({\n    points: 0,\n    modulesCompleted: 0,\n    completedModules: [],\n    timeSpent: 0\n  });\n  const {\n    currentUser\n  } = useAuth();\n  const [notifications, setNotifications] = useState([]);\n  useEffect(() => {\n    if (currentUser) {\n      const fetchProgress = async () => {\n        const progressRef = doc(db, 'progress', currentUser.uid);\n        const progressSnap = await getDoc(progressRef);\n        if (progressSnap.exists()) {\n          setUserProgress(progressSnap.data());\n        } else {\n          // Initialize progress for new users\n          const initialProgress = {\n            points: 0,\n            modulesCompleted: 0,\n            completedModules: [],\n            timeSpent: 0\n          };\n          await setDoc(progressRef, initialProgress);\n          setUserProgress(initialProgress);\n        }\n      };\n      fetchProgress();\n    }\n  }, [currentUser]);\n  useEffect(() => {\n    if (currentUser) {\n      localStorage.setItem('userProgress', JSON.stringify(userProgress));\n    }\n  }, [userProgress]);\n  const completeModule = async moduleId => {\n    if (!currentUser || userProgress.completedModules.includes(moduleId)) {\n      return;\n    }\n    const newProgress = {\n      ...userProgress,\n      points: userProgress.points + 50,\n      // Base points for completing a module\n      modulesCompleted: userProgress.modulesCompleted + 1,\n      completedModules: [...userProgress.completedModules, moduleId]\n    };\n    const progressRef = doc(db, 'progress', currentUser.uid);\n    await setDoc(progressRef, newProgress);\n    setUserProgress(newProgress);\n  };\n  const addPoints = async (points, reason) => {\n    if (!currentUser) return;\n    const newProgress = {\n      ...userProgress,\n      points: userProgress.points + points\n    };\n    const progressRef = doc(db, 'progress', currentUser.uid);\n    await setDoc(progressRef, newProgress);\n    setUserProgress(newProgress);\n  };\n  const resetProgress = () => {\n    setUserProgress({\n      points: 0,\n      modulesCompleted: 0,\n      completedModules: [],\n      timeSpent: 0\n    });\n  };\n  const addNotification = (type, message) => {\n    const newNotification = {\n      id: Date.now(),\n      type,\n      message,\n      timestamp: new Date()\n    };\n    setNotifications(prev => [newNotification, ...prev]);\n    setTimeout(() => {\n      setNotifications(prev => prev.filter(n => n.id !== newNotification.id));\n    }, 5000);\n  };\n  const checkRankProgress = points => {\n    const ranks = Object.values(RANKS);\n    for (let i = ranks.length - 1; i >= 0; i--) {\n      if (points >= ranks[i].minPoints && userProgress.currentRank.name !== ranks[i].name) {\n        setUserProgress(prev => ({\n          ...prev,\n          currentRank: ranks[i]\n        }));\n        addNotification(NOTIFICATIONS.RANK_UP, `Congratulations! You've reached ${ranks[i].name} rank!`);\n        break;\n      }\n    }\n  };\n  const checkAchievements = () => {\n    const {\n      modulesCompleted,\n      timeSpent,\n      completedModules\n    } = userProgress;\n    const unlockedAchievements = [];\n\n    // First Steps\n    if (modulesCompleted >= 1 && !hasAchievement(ACHIEVEMENTS.FIRST_STEPS.id)) {\n      unlockedAchievements.push(ACHIEVEMENTS.FIRST_STEPS);\n    }\n\n    // Quick Learner\n    if (modulesCompleted >= 3 && !hasAchievement(ACHIEVEMENTS.QUICK_LEARNER.id)) {\n      unlockedAchievements.push(ACHIEVEMENTS.QUICK_LEARNER);\n    }\n\n    // Knowledge Seeker\n    if (completedModules.length === 7 && !hasAchievement(ACHIEVEMENTS.KNOWLEDGE_SEEKER.id)) {\n      unlockedAchievements.push(ACHIEVEMENTS.KNOWLEDGE_SEEKER);\n    }\n\n    // Quiz Master\n    if (timeSpent >= 300 && !hasAchievement(ACHIEVEMENTS.QUIZ_MASTER.id)) {\n      unlockedAchievements.push(ACHIEVEMENTS.QUIZ_MASTER);\n    }\n    unlockedAchievements.forEach(achievement => {\n      addAchievement(achievement);\n    });\n  };\n  const hasAchievement = achievementId => {\n    return userProgress.achievements.some(a => a.id === achievementId);\n  };\n  const addAchievement = achievement => {\n    setUserProgress(prev => {\n      const newPoints = prev.points + achievement.points;\n      checkRankProgress(newPoints);\n      return {\n        ...prev,\n        points: newPoints\n      };\n    });\n    addNotification(NOTIFICATIONS.ACHIEVEMENT_UNLOCKED, `Achievement Unlocked: ${achievement.name} (+${achievement.points} points)`);\n  };\n  const updateTimeSpent = minutes => {\n    setUserProgress(prev => ({\n      ...prev,\n      timeSpent: prev.timeSpent + minutes\n    }));\n  };\n  const formatTime = minutes => {\n    const hours = Math.floor(minutes / 60);\n    const mins = minutes % 60;\n    return `${hours}h ${mins}m`;\n  };\n  const addActivity = activity => {\n    const newActivity = {\n      id: Date.now(),\n      description: activity,\n      timestamp: new Date()\n    };\n    setUserProgress(prev => ({\n      ...prev,\n      recentActivities: [newActivity, ...prev.recentActivities.slice(0, 9)]\n    }));\n  };\n  const value = {\n    userProgress,\n    notifications,\n    resetProgress,\n    completeModule,\n    addPoints,\n    updateTimeSpent,\n    formatTime,\n    addActivity,\n    hasAchievement,\n    checkAchievements\n  };\n  return /*#__PURE__*/_jsxDEV(ProgressContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 208,\n    columnNumber: 5\n  }, this);\n}\n_s2(ProgressProvider, \"m1ZPzq76i2LQhU4bjqsZr+A5rcg=\", false, function () {\n  return [useAuth];\n});\n_c = ProgressProvider;\nvar _c;\n$RefreshReg$(_c, \"ProgressProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useAuth","db","doc","getDoc","setDoc","RANKS","ACHIEVEMENTS","NOTIFICATIONS","jsxDEV","_jsxDEV","ProgressContext","useProgress","_s","ProgressProvider","children","_s2","userProgress","setUserProgress","points","modulesCompleted","completedModules","timeSpent","currentUser","notifications","setNotifications","fetchProgress","progressRef","uid","progressSnap","exists","data","initialProgress","localStorage","setItem","JSON","stringify","completeModule","moduleId","includes","newProgress","addPoints","reason","resetProgress","addNotification","type","message","newNotification","id","Date","now","timestamp","prev","setTimeout","filter","n","checkRankProgress","ranks","Object","values","i","length","minPoints","currentRank","name","RANK_UP","checkAchievements","unlockedAchievements","hasAchievement","FIRST_STEPS","push","QUICK_LEARNER","KNOWLEDGE_SEEKER","QUIZ_MASTER","forEach","achievement","addAchievement","achievementId","achievements","some","a","newPoints","ACHIEVEMENT_UNLOCKED","updateTimeSpent","minutes","formatTime","hours","Math","floor","mins","addActivity","activity","newActivity","description","recentActivities","slice","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ap75r/OneDrive/Desktop/Proj/sepm project/client/src/contexts/ProgressContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { useAuth } from './AuthContext';\r\nimport { db } from '../firebase';\r\nimport { doc, getDoc, setDoc } from 'firebase/firestore';\r\nimport { RANKS, ACHIEVEMENTS, NOTIFICATIONS } from '../constants/badges';\r\n\r\nconst ProgressContext = createContext();\r\n\r\nexport function useProgress() {\r\n  return useContext(ProgressContext);\r\n}\r\n\r\nexport function ProgressProvider({ children }) {\r\n  const [userProgress, setUserProgress] = useState({\r\n    points: 0,\r\n    modulesCompleted: 0,\r\n    completedModules: [],\r\n    timeSpent: 0,\r\n  });\r\n  const { currentUser } = useAuth();\r\n  const [notifications, setNotifications] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      const fetchProgress = async () => {\r\n        const progressRef = doc(db, 'progress', currentUser.uid);\r\n        const progressSnap = await getDoc(progressRef);\r\n\r\n        if (progressSnap.exists()) {\r\n          setUserProgress(progressSnap.data());\r\n        } else {\r\n          // Initialize progress for new users\r\n          const initialProgress = {\r\n            points: 0,\r\n            modulesCompleted: 0,\r\n            completedModules: [],\r\n            timeSpent: 0,\r\n          };\r\n          await setDoc(progressRef, initialProgress);\r\n          setUserProgress(initialProgress);\r\n        }\r\n      };\r\n\r\n      fetchProgress();\r\n    }\r\n  }, [currentUser]);\r\n\r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      localStorage.setItem('userProgress', JSON.stringify(userProgress));\r\n    }\r\n  }, [userProgress]);\r\n\r\n  const completeModule = async (moduleId) => {\r\n    if (!currentUser || userProgress.completedModules.includes(moduleId)) {\r\n      return;\r\n    }\r\n\r\n    const newProgress = {\r\n      ...userProgress,\r\n      points: userProgress.points + 50, // Base points for completing a module\r\n      modulesCompleted: userProgress.modulesCompleted + 1,\r\n      completedModules: [...userProgress.completedModules, moduleId],\r\n    };\r\n\r\n    const progressRef = doc(db, 'progress', currentUser.uid);\r\n    await setDoc(progressRef, newProgress);\r\n    setUserProgress(newProgress);\r\n  };\r\n\r\n  const addPoints = async (points, reason) => {\r\n    if (!currentUser) return;\r\n\r\n    const newProgress = {\r\n      ...userProgress,\r\n      points: userProgress.points + points,\r\n    };\r\n\r\n    const progressRef = doc(db, 'progress', currentUser.uid);\r\n    await setDoc(progressRef, newProgress);\r\n    setUserProgress(newProgress);\r\n  };\r\n\r\n  const resetProgress = () => {\r\n    setUserProgress({\r\n      points: 0,\r\n      modulesCompleted: 0,\r\n      completedModules: [],\r\n      timeSpent: 0,\r\n    });\r\n  };\r\n\r\n  const addNotification = (type, message) => {\r\n    const newNotification = {\r\n      id: Date.now(),\r\n      type,\r\n      message,\r\n      timestamp: new Date()\r\n    };\r\n    setNotifications(prev => [newNotification, ...prev]);\r\n    setTimeout(() => {\r\n      setNotifications(prev => prev.filter(n => n.id !== newNotification.id));\r\n    }, 5000);\r\n  };\r\n\r\n  const checkRankProgress = (points) => {\r\n    const ranks = Object.values(RANKS);\r\n    for (let i = ranks.length - 1; i >= 0; i--) {\r\n      if (points >= ranks[i].minPoints && userProgress.currentRank.name !== ranks[i].name) {\r\n        setUserProgress(prev => ({\r\n          ...prev,\r\n          currentRank: ranks[i]\r\n        }));\r\n        addNotification(NOTIFICATIONS.RANK_UP, `Congratulations! You've reached ${ranks[i].name} rank!`);\r\n        break;\r\n      }\r\n    }\r\n  };\r\n\r\n  const checkAchievements = () => {\r\n    const { modulesCompleted, timeSpent, completedModules } = userProgress;\r\n    const unlockedAchievements = [];\r\n\r\n    // First Steps\r\n    if (modulesCompleted >= 1 && !hasAchievement(ACHIEVEMENTS.FIRST_STEPS.id)) {\r\n      unlockedAchievements.push(ACHIEVEMENTS.FIRST_STEPS);\r\n    }\r\n\r\n    // Quick Learner\r\n    if (modulesCompleted >= 3 && !hasAchievement(ACHIEVEMENTS.QUICK_LEARNER.id)) {\r\n      unlockedAchievements.push(ACHIEVEMENTS.QUICK_LEARNER);\r\n    }\r\n\r\n    // Knowledge Seeker\r\n    if (completedModules.length === 7 && !hasAchievement(ACHIEVEMENTS.KNOWLEDGE_SEEKER.id)) {\r\n      unlockedAchievements.push(ACHIEVEMENTS.KNOWLEDGE_SEEKER);\r\n    }\r\n\r\n    // Quiz Master\r\n    if (timeSpent >= 300 && !hasAchievement(ACHIEVEMENTS.QUIZ_MASTER.id)) {\r\n      unlockedAchievements.push(ACHIEVEMENTS.QUIZ_MASTER);\r\n    }\r\n\r\n    unlockedAchievements.forEach(achievement => {\r\n      addAchievement(achievement);\r\n    });\r\n  };\r\n\r\n  const hasAchievement = (achievementId) => {\r\n    return userProgress.achievements.some(a => a.id === achievementId);\r\n  };\r\n\r\n  const addAchievement = (achievement) => {\r\n    setUserProgress(prev => {\r\n      const newPoints = prev.points + achievement.points;\r\n      checkRankProgress(newPoints);\r\n      \r\n      return {\r\n        ...prev,\r\n        points: newPoints\r\n      };\r\n    });\r\n    addNotification(\r\n      NOTIFICATIONS.ACHIEVEMENT_UNLOCKED,\r\n      `Achievement Unlocked: ${achievement.name} (+${achievement.points} points)`\r\n    );\r\n  };\r\n\r\n  const updateTimeSpent = (minutes) => {\r\n    setUserProgress(prev => ({\r\n      ...prev,\r\n      timeSpent: prev.timeSpent + minutes\r\n    }));\r\n  };\r\n\r\n  const formatTime = (minutes) => {\r\n    const hours = Math.floor(minutes / 60);\r\n    const mins = minutes % 60;\r\n    return `${hours}h ${mins}m`;\r\n  };\r\n\r\n  const addActivity = (activity) => {\r\n    const newActivity = {\r\n      id: Date.now(),\r\n      description: activity,\r\n      timestamp: new Date()\r\n    };\r\n    setUserProgress(prev => ({\r\n      ...prev,\r\n      recentActivities: [newActivity, ...prev.recentActivities.slice(0, 9)]\r\n    }));\r\n  };\r\n\r\n  const value = {\r\n    userProgress,\r\n    notifications,\r\n    resetProgress,\r\n    completeModule,\r\n    addPoints,\r\n    updateTimeSpent,\r\n    formatTime,\r\n    addActivity,\r\n    hasAchievement,\r\n    checkAchievements\r\n  };\r\n\r\n  return (\r\n    <ProgressContext.Provider value={value}>\r\n      {children}\r\n    </ProgressContext.Provider>\r\n  );\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}