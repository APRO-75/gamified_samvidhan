{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ap75r\\\\OneDrive\\\\Desktop\\\\Proj\\\\sepm project\\\\client\\\\src\\\\contexts\\\\ProgressContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useAuth } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProgressContext = /*#__PURE__*/createContext();\nexport function useProgress() {\n  _s();\n  return useContext(ProgressContext);\n}\n_s(useProgress, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function ProgressProvider({\n  children\n}) {\n  _s2();\n  const {\n    currentUser\n  } = useAuth();\n  const [userProgress, setUserProgress] = useState({\n    modulesCompleted: 0,\n    quizzesTaken: 0,\n    averageScore: 0,\n    totalPoints: 0,\n    totalTimeSpent: 0,\n    // Total time spent learning in seconds\n    badges: [],\n    recentActivities: []\n  });\n\n  // Reset progress\n  const resetProgress = () => {\n    setUserProgress({\n      modulesCompleted: 0,\n      quizzesTaken: 0,\n      averageScore: 0,\n      totalPoints: 0,\n      totalTimeSpent: 0,\n      badges: [],\n      recentActivities: []\n    });\n  };\n\n  // Update modules completed\n  const updateModulesCompleted = newCount => {\n    setUserProgress(prev => ({\n      ...prev,\n      modulesCompleted: newCount\n    }));\n    addActivity({\n      type: 'module_completed',\n      title: `Module ${newCount}`,\n      timestamp: new Date()\n    });\n  };\n\n  // Update time spent\n  const updateTimeSpent = additionalSeconds => {\n    setUserProgress(prev => {\n      const newTotalTime = prev.totalTimeSpent + additionalSeconds;\n      return {\n        ...prev,\n        totalTimeSpent: newTotalTime\n      };\n    });\n  };\n\n  // Format time for display\n  const formatTimeSpent = totalSeconds => {\n    const hours = Math.floor(totalSeconds / 3600);\n    const minutes = Math.floor(totalSeconds % 3600 / 60);\n    if (hours > 0) {\n      return `${hours}h ${minutes}m`;\n    }\n    return `${minutes}m`;\n  };\n\n  // Update quiz statistics\n  const updateQuizStats = score => {\n    setUserProgress(prev => {\n      const newQuizCount = prev.quizzesTaken + 1;\n      const newAverageScore = Math.round((prev.averageScore * prev.quizzesTaken + score) / newQuizCount);\n      return {\n        ...prev,\n        quizzesTaken: newQuizCount,\n        averageScore: newAverageScore\n      };\n    });\n    addActivity({\n      type: 'quiz_completed',\n      title: 'Quiz',\n      score: score,\n      timestamp: new Date()\n    });\n  };\n\n  // Add points\n  const addPoints = points => {\n    setUserProgress(prev => ({\n      ...prev,\n      totalPoints: prev.totalPoints + points\n    }));\n  };\n\n  // Add badge\n  const addBadge = badge => {\n    setUserProgress(prev => ({\n      ...prev,\n      badges: [...prev.badges, badge]\n    }));\n    addActivity({\n      type: 'badge_earned',\n      title: badge.name,\n      timestamp: new Date()\n    });\n  };\n\n  // Add activity\n  const addActivity = activity => {\n    if (activity.type === 'learning_time') {\n      const timeString = formatTimeSpent(activity.timeSpent);\n      activity.title = `Spent ${timeString} learning`;\n    }\n    setUserProgress(prev => ({\n      ...prev,\n      recentActivities: [activity, ...prev.recentActivities].slice(0, 10) // Increased to show more activities\n    }));\n  };\n\n  // Load progress from localStorage when component mounts or user changes\n  useEffect(() => {\n    if (currentUser) {\n      const savedProgress = localStorage.getItem(`progress_${currentUser.uid}`);\n      if (savedProgress) {\n        setUserProgress(JSON.parse(savedProgress));\n      }\n    }\n  }, [currentUser]);\n\n  // Save progress to localStorage whenever it changes\n  useEffect(() => {\n    if (currentUser) {\n      localStorage.setItem(`progress_${currentUser.uid}`, JSON.stringify(userProgress));\n    }\n  }, [userProgress, currentUser]);\n  const value = {\n    userProgress,\n    resetProgress,\n    updateModulesCompleted,\n    updateQuizStats,\n    addPoints,\n    addBadge,\n    addActivity,\n    updateTimeSpent,\n    formatTimeSpent\n  };\n  return /*#__PURE__*/_jsxDEV(ProgressContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 5\n  }, this);\n}\n_s2(ProgressProvider, \"jwonVn0SvAQb/O9pysiNdlZRY+k=\", false, function () {\n  return [useAuth];\n});\n_c = ProgressProvider;\nvar _c;\n$RefreshReg$(_c, \"ProgressProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useAuth","jsxDEV","_jsxDEV","ProgressContext","useProgress","_s","ProgressProvider","children","_s2","currentUser","userProgress","setUserProgress","modulesCompleted","quizzesTaken","averageScore","totalPoints","totalTimeSpent","badges","recentActivities","resetProgress","updateModulesCompleted","newCount","prev","addActivity","type","title","timestamp","Date","updateTimeSpent","additionalSeconds","newTotalTime","formatTimeSpent","totalSeconds","hours","Math","floor","minutes","updateQuizStats","score","newQuizCount","newAverageScore","round","addPoints","points","addBadge","badge","name","activity","timeString","timeSpent","slice","savedProgress","localStorage","getItem","uid","JSON","parse","setItem","stringify","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ap75r/OneDrive/Desktop/Proj/sepm project/client/src/contexts/ProgressContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { useAuth } from './AuthContext';\r\n\r\nconst ProgressContext = createContext();\r\n\r\nexport function useProgress() {\r\n  return useContext(ProgressContext);\r\n}\r\n\r\nexport function ProgressProvider({ children }) {\r\n  const { currentUser } = useAuth();\r\n  const [userProgress, setUserProgress] = useState({\r\n    modulesCompleted: 0,\r\n    quizzesTaken: 0,\r\n    averageScore: 0,\r\n    totalPoints: 0,\r\n    totalTimeSpent: 0, // Total time spent learning in seconds\r\n    badges: [],\r\n    recentActivities: []\r\n  });\r\n\r\n  // Reset progress\r\n  const resetProgress = () => {\r\n    setUserProgress({\r\n      modulesCompleted: 0,\r\n      quizzesTaken: 0,\r\n      averageScore: 0,\r\n      totalPoints: 0,\r\n      totalTimeSpent: 0,\r\n      badges: [],\r\n      recentActivities: []\r\n    });\r\n  };\r\n\r\n  // Update modules completed\r\n  const updateModulesCompleted = (newCount) => {\r\n    setUserProgress(prev => ({\r\n      ...prev,\r\n      modulesCompleted: newCount\r\n    }));\r\n    addActivity({\r\n      type: 'module_completed',\r\n      title: `Module ${newCount}`,\r\n      timestamp: new Date()\r\n    });\r\n  };\r\n\r\n  // Update time spent\r\n  const updateTimeSpent = (additionalSeconds) => {\r\n    setUserProgress(prev => {\r\n      const newTotalTime = prev.totalTimeSpent + additionalSeconds;\r\n      return {\r\n        ...prev,\r\n        totalTimeSpent: newTotalTime\r\n      };\r\n    });\r\n  };\r\n\r\n  // Format time for display\r\n  const formatTimeSpent = (totalSeconds) => {\r\n    const hours = Math.floor(totalSeconds / 3600);\r\n    const minutes = Math.floor((totalSeconds % 3600) / 60);\r\n    \r\n    if (hours > 0) {\r\n      return `${hours}h ${minutes}m`;\r\n    }\r\n    return `${minutes}m`;\r\n  };\r\n\r\n  // Update quiz statistics\r\n  const updateQuizStats = (score) => {\r\n    setUserProgress(prev => {\r\n      const newQuizCount = prev.quizzesTaken + 1;\r\n      const newAverageScore = Math.round(\r\n        ((prev.averageScore * prev.quizzesTaken) + score) / newQuizCount\r\n      );\r\n      return {\r\n        ...prev,\r\n        quizzesTaken: newQuizCount,\r\n        averageScore: newAverageScore\r\n      };\r\n    });\r\n    addActivity({\r\n      type: 'quiz_completed',\r\n      title: 'Quiz',\r\n      score: score,\r\n      timestamp: new Date()\r\n    });\r\n  };\r\n\r\n  // Add points\r\n  const addPoints = (points) => {\r\n    setUserProgress(prev => ({\r\n      ...prev,\r\n      totalPoints: prev.totalPoints + points\r\n    }));\r\n  };\r\n\r\n  // Add badge\r\n  const addBadge = (badge) => {\r\n    setUserProgress(prev => ({\r\n      ...prev,\r\n      badges: [...prev.badges, badge]\r\n    }));\r\n    addActivity({\r\n      type: 'badge_earned',\r\n      title: badge.name,\r\n      timestamp: new Date()\r\n    });\r\n  };\r\n\r\n  // Add activity\r\n  const addActivity = (activity) => {\r\n    if (activity.type === 'learning_time') {\r\n      const timeString = formatTimeSpent(activity.timeSpent);\r\n      activity.title = `Spent ${timeString} learning`;\r\n    }\r\n    \r\n    setUserProgress(prev => ({\r\n      ...prev,\r\n      recentActivities: [activity, ...prev.recentActivities].slice(0, 10) // Increased to show more activities\r\n    }));\r\n  };\r\n\r\n  // Load progress from localStorage when component mounts or user changes\r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      const savedProgress = localStorage.getItem(`progress_${currentUser.uid}`);\r\n      if (savedProgress) {\r\n        setUserProgress(JSON.parse(savedProgress));\r\n      }\r\n    }\r\n  }, [currentUser]);\r\n\r\n  // Save progress to localStorage whenever it changes\r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      localStorage.setItem(`progress_${currentUser.uid}`, JSON.stringify(userProgress));\r\n    }\r\n  }, [userProgress, currentUser]);\r\n\r\n  const value = {\r\n    userProgress,\r\n    resetProgress,\r\n    updateModulesCompleted,\r\n    updateQuizStats,\r\n    addPoints,\r\n    addBadge,\r\n    addActivity,\r\n    updateTimeSpent,\r\n    formatTimeSpent\r\n  };\r\n\r\n  return (\r\n    <ProgressContext.Provider value={value}>\r\n      {children}\r\n    </ProgressContext.Provider>\r\n  );\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}