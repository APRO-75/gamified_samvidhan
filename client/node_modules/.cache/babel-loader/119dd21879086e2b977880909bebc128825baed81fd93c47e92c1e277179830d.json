{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ap75r\\\\OneDrive\\\\Desktop\\\\Proj\\\\sepm project\\\\client\\\\src\\\\contexts\\\\ProgressContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { auth, db } from '../firebase';\nimport { doc, setDoc, getDoc, updateDoc } from 'firebase/firestore';\nimport { RANKS, ACHIEVEMENTS, NOTIFICATIONS } from '../constants/badges';\nimport { useAuth } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProgressContext = /*#__PURE__*/createContext();\nexport function useProgress() {\n  _s();\n  return useContext(ProgressContext);\n}\n_s(useProgress, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function ProgressProvider({\n  children\n}) {\n  _s2();\n  const {\n    currentUser\n  } = useAuth();\n  const [userProgress, setUserProgress] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [notifications, setNotifications] = useState([]);\n  useEffect(() => {\n    if (currentUser) {\n      const fetchProgress = async () => {\n        const progressRef = doc(db, 'progress', currentUser.uid);\n        const progressSnap = await getDoc(progressRef);\n        if (progressSnap.exists()) {\n          setUserProgress(progressSnap.data());\n        } else {\n          // Initialize progress document if it doesn't exist\n          const initialProgress = {\n            points: 0,\n            quizzesTaken: 0,\n            averageScore: 0,\n            highestScore: 0,\n            totalPoints: 0,\n            badges: [],\n            achievements: [],\n            completedLessons: [],\n            modulesCompleted: 0,\n            completedModules: [],\n            recentActivities: [],\n            currentRank: RANKS.WOOD\n          };\n          await setDoc(progressRef, initialProgress);\n          setUserProgress(initialProgress);\n        }\n        setLoading(false);\n      };\n      fetchProgress();\n    }\n  }, [currentUser]);\n  useEffect(() => {\n    if (currentUser) {\n      localStorage.setItem('userProgress', JSON.stringify(userProgress));\n      syncProgressWithFirebase();\n    }\n  }, [userProgress, currentUser]);\n  const syncProgressWithFirebase = async () => {\n    if (currentUser) {\n      try {\n        const progressRef = doc(db, 'progress', currentUser.uid);\n        await setDoc(progressRef, userProgress);\n      } catch (error) {\n        console.error('Error syncing progress:', error);\n      }\n    }\n  };\n  const resetProgress = async () => {\n    if (!currentUser) return;\n    const initialProgress = {\n      points: 0,\n      quizzesTaken: 0,\n      averageScore: 0,\n      highestScore: 0,\n      totalPoints: 0,\n      badges: [],\n      achievements: [],\n      completedLessons: [],\n      modulesCompleted: 0,\n      completedModules: [],\n      recentActivities: [],\n      currentRank: RANKS.WOOD\n    };\n    try {\n      const progressRef = doc(db, 'progress', currentUser.uid);\n      await setDoc(progressRef, initialProgress);\n      setUserProgress(initialProgress);\n    } catch (error) {\n      console.error('Error resetting progress:', error);\n    }\n  };\n  const addNotification = (type, message) => {\n    const newNotification = {\n      id: Date.now(),\n      type,\n      message,\n      timestamp: new Date()\n    };\n    setNotifications(prev => [newNotification, ...prev]);\n    setTimeout(() => {\n      setNotifications(prev => prev.filter(n => n.id !== newNotification.id));\n    }, 5000);\n  };\n  const checkRankProgress = points => {\n    const ranks = Object.values(RANKS);\n    for (let i = ranks.length - 1; i >= 0; i--) {\n      if (points >= ranks[i].minPoints && userProgress.currentRank.name !== ranks[i].name) {\n        setUserProgress(prev => ({\n          ...prev,\n          currentRank: ranks[i]\n        }));\n        addNotification(NOTIFICATIONS.RANK_UP, `Congratulations! You've reached ${ranks[i].name} rank!`);\n        break;\n      }\n    }\n  };\n  const checkAchievements = () => {\n    const {\n      modulesCompleted,\n      quizzesTaken,\n      averageScore,\n      completedModules\n    } = userProgress;\n    const unlockedAchievements = [];\n\n    // First Steps\n    if (modulesCompleted >= 1 && !hasAchievement(ACHIEVEMENTS.FIRST_STEPS.id)) {\n      unlockedAchievements.push(ACHIEVEMENTS.FIRST_STEPS);\n    }\n\n    // Quick Learner\n    if (modulesCompleted >= 3 && !hasAchievement(ACHIEVEMENTS.QUICK_LEARNER.id)) {\n      unlockedAchievements.push(ACHIEVEMENTS.QUICK_LEARNER);\n    }\n\n    // Knowledge Seeker\n    if (completedModules.length === 7 && !hasAchievement(ACHIEVEMENTS.KNOWLEDGE_SEEKER.id)) {\n      unlockedAchievements.push(ACHIEVEMENTS.KNOWLEDGE_SEEKER);\n    }\n\n    // Quiz Master\n    if (quizzesTaken >= 5 && averageScore >= 90 && !hasAchievement(ACHIEVEMENTS.QUIZ_MASTER.id)) {\n      unlockedAchievements.push(ACHIEVEMENTS.QUIZ_MASTER);\n    }\n    unlockedAchievements.forEach(achievement => {\n      addAchievement(achievement);\n    });\n  };\n  const hasAchievement = achievementId => {\n    var _userProgress$achieve;\n    return ((_userProgress$achieve = userProgress.achievements) === null || _userProgress$achieve === void 0 ? void 0 : _userProgress$achieve.some(a => a.id === achievementId)) || false;\n  };\n  const addAchievement = achievement => {\n    setUserProgress(prev => {\n      const newPoints = prev.totalPoints + achievement.points;\n      checkRankProgress(newPoints);\n\n      // Update both achievements and badges arrays\n      const newAchievements = [...(prev.achievements || []), achievement];\n      const newBadges = [...(prev.badges || []), {\n        id: achievement.id,\n        name: achievement.name,\n        description: achievement.description,\n        earnedAt: new Date().toISOString()\n      }];\n      return {\n        ...prev,\n        achievements: newAchievements,\n        badges: newBadges,\n        totalPoints: newPoints\n      };\n    });\n    addNotification(NOTIFICATIONS.ACHIEVEMENT_UNLOCKED, `Achievement Unlocked: ${achievement.name} (+${achievement.points} points)`);\n  };\n  const updateModulesCompleted = async moduleId => {\n    if (!currentUser || !userProgress) return;\n\n    // Only update if the module isn't already completed\n    if (!userProgress.completedModules.includes(moduleId)) {\n      const updatedProgress = {\n        ...userProgress,\n        modulesCompleted: userProgress.modulesCompleted + 1,\n        completedModules: [...userProgress.completedModules, moduleId]\n      };\n      try {\n        const progressRef = doc(db, 'progress', currentUser.uid);\n        await updateDoc(progressRef, updatedProgress);\n        setUserProgress(updatedProgress);\n        checkAchievements();\n        addActivity({\n          type: 'module_completed',\n          title: `Module ${moduleId}`,\n          timestamp: new Date()\n        });\n      } catch (error) {\n        console.error('Error updating module completion:', error);\n      }\n    }\n  };\n  const updateTimeSpent = minutes => {\n    setUserProgress(prev => ({\n      ...prev,\n      totalTimeSpent: prev.totalTimeSpent + minutes\n    }));\n  };\n  const updateQuizStats = async (score, earnedPoints) => {\n    if (!currentUser) return;\n    const progressRef = doc(db, 'progress', currentUser.uid);\n    const newQuizzesTaken = (userProgress.quizzesTaken || 0) + 1;\n    const newAverageScore = Math.round(((userProgress.averageScore || 0) * (userProgress.quizzesTaken || 0) + score) / newQuizzesTaken);\n    const newHighestScore = Math.max(userProgress.highestScore || 0, score);\n    const newTotalPoints = (userProgress.totalPoints || 0) + earnedPoints;\n    const updatedProgress = {\n      ...userProgress,\n      quizzesTaken: newQuizzesTaken,\n      averageScore: newAverageScore,\n      highestScore: newHighestScore,\n      totalPoints: newTotalPoints\n    };\n    await updateDoc(progressRef, updatedProgress);\n    setUserProgress(updatedProgress);\n    checkAchievements();\n  };\n  const addPoints = async points => {\n    if (!currentUser) return;\n    const progressRef = doc(db, 'progress', currentUser.uid);\n    const newPoints = (userProgress.totalPoints || 0) + points;\n    const updatedProgress = {\n      ...userProgress,\n      totalPoints: newPoints\n    };\n    await updateDoc(progressRef, updatedProgress);\n    setUserProgress(updatedProgress);\n    checkAchievements();\n  };\n  const formatTime = minutes => {\n    const hours = Math.floor(minutes / 60);\n    const mins = minutes % 60;\n    return `${hours}h ${mins}m`;\n  };\n  const addActivity = activity => {\n    const newActivity = {\n      id: Date.now(),\n      description: activity,\n      timestamp: new Date()\n    };\n    setUserProgress(prev => ({\n      ...prev,\n      recentActivities: [newActivity, ...prev.recentActivities.slice(0, 9)]\n    }));\n  };\n  const value = {\n    userProgress,\n    notifications,\n    resetProgress,\n    updateModulesCompleted,\n    updateTimeSpent,\n    updateQuizStats,\n    addPoints,\n    formatTime,\n    addActivity,\n    hasAchievement,\n    checkAchievements,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(ProgressContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 293,\n    columnNumber: 5\n  }, this);\n}\n_s2(ProgressProvider, \"raX+KvuYlgCgFUBGqAS9hkq6Q4M=\", false, function () {\n  return [useAuth];\n});\n_c = ProgressProvider;\nvar _c;\n$RefreshReg$(_c, \"ProgressProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","auth","db","doc","setDoc","getDoc","updateDoc","RANKS","ACHIEVEMENTS","NOTIFICATIONS","useAuth","jsxDEV","_jsxDEV","ProgressContext","useProgress","_s","ProgressProvider","children","_s2","currentUser","userProgress","setUserProgress","loading","setLoading","notifications","setNotifications","fetchProgress","progressRef","uid","progressSnap","exists","data","initialProgress","points","quizzesTaken","averageScore","highestScore","totalPoints","badges","achievements","completedLessons","modulesCompleted","completedModules","recentActivities","currentRank","WOOD","localStorage","setItem","JSON","stringify","syncProgressWithFirebase","error","console","resetProgress","addNotification","type","message","newNotification","id","Date","now","timestamp","prev","setTimeout","filter","n","checkRankProgress","ranks","Object","values","i","length","minPoints","name","RANK_UP","checkAchievements","unlockedAchievements","hasAchievement","FIRST_STEPS","push","QUICK_LEARNER","KNOWLEDGE_SEEKER","QUIZ_MASTER","forEach","achievement","addAchievement","achievementId","_userProgress$achieve","some","a","newPoints","newAchievements","newBadges","description","earnedAt","toISOString","ACHIEVEMENT_UNLOCKED","updateModulesCompleted","moduleId","includes","updatedProgress","addActivity","title","updateTimeSpent","minutes","totalTimeSpent","updateQuizStats","score","earnedPoints","newQuizzesTaken","newAverageScore","Math","round","newHighestScore","max","newTotalPoints","addPoints","formatTime","hours","floor","mins","activity","newActivity","slice","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ap75r/OneDrive/Desktop/Proj/sepm project/client/src/contexts/ProgressContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { auth, db } from '../firebase';\r\nimport { doc, setDoc, getDoc, updateDoc } from 'firebase/firestore';\r\nimport { RANKS, ACHIEVEMENTS, NOTIFICATIONS } from '../constants/badges';\r\nimport { useAuth } from './AuthContext';\r\n\r\nconst ProgressContext = createContext();\r\n\r\nexport function useProgress() {\r\n  return useContext(ProgressContext);\r\n}\r\n\r\nexport function ProgressProvider({ children }) {\r\n  const { currentUser } = useAuth();\r\n  const [userProgress, setUserProgress] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [notifications, setNotifications] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      const fetchProgress = async () => {\r\n        const progressRef = doc(db, 'progress', currentUser.uid);\r\n        const progressSnap = await getDoc(progressRef);\r\n        \r\n        if (progressSnap.exists()) {\r\n          setUserProgress(progressSnap.data());\r\n        } else {\r\n          // Initialize progress document if it doesn't exist\r\n          const initialProgress = {\r\n            points: 0,\r\n            quizzesTaken: 0,\r\n            averageScore: 0,\r\n            highestScore: 0,\r\n            totalPoints: 0,\r\n            badges: [],\r\n            achievements: [],\r\n            completedLessons: [],\r\n            modulesCompleted: 0,\r\n            completedModules: [],\r\n            recentActivities: [],\r\n            currentRank: RANKS.WOOD\r\n          };\r\n          await setDoc(progressRef, initialProgress);\r\n          setUserProgress(initialProgress);\r\n        }\r\n        setLoading(false);\r\n      };\r\n      fetchProgress();\r\n    }\r\n  }, [currentUser]);\r\n\r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      localStorage.setItem('userProgress', JSON.stringify(userProgress));\r\n      syncProgressWithFirebase();\r\n    }\r\n  }, [userProgress, currentUser]);\r\n\r\n  const syncProgressWithFirebase = async () => {\r\n    if (currentUser) {\r\n      try {\r\n        const progressRef = doc(db, 'progress', currentUser.uid);\r\n        await setDoc(progressRef, userProgress);\r\n      } catch (error) {\r\n        console.error('Error syncing progress:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const resetProgress = async () => {\r\n    if (!currentUser) return;\r\n\r\n    const initialProgress = {\r\n      points: 0,\r\n      quizzesTaken: 0,\r\n      averageScore: 0,\r\n      highestScore: 0,\r\n      totalPoints: 0,\r\n      badges: [],\r\n      achievements: [],\r\n      completedLessons: [],\r\n      modulesCompleted: 0,\r\n      completedModules: [],\r\n      recentActivities: [],\r\n      currentRank: RANKS.WOOD\r\n    };\r\n\r\n    try {\r\n      const progressRef = doc(db, 'progress', currentUser.uid);\r\n      await setDoc(progressRef, initialProgress);\r\n      setUserProgress(initialProgress);\r\n    } catch (error) {\r\n      console.error('Error resetting progress:', error);\r\n    }\r\n  };\r\n\r\n  const addNotification = (type, message) => {\r\n    const newNotification = {\r\n      id: Date.now(),\r\n      type,\r\n      message,\r\n      timestamp: new Date()\r\n    };\r\n    setNotifications(prev => [newNotification, ...prev]);\r\n    setTimeout(() => {\r\n      setNotifications(prev => prev.filter(n => n.id !== newNotification.id));\r\n    }, 5000);\r\n  };\r\n\r\n  const checkRankProgress = (points) => {\r\n    const ranks = Object.values(RANKS);\r\n    for (let i = ranks.length - 1; i >= 0; i--) {\r\n      if (points >= ranks[i].minPoints && userProgress.currentRank.name !== ranks[i].name) {\r\n        setUserProgress(prev => ({\r\n          ...prev,\r\n          currentRank: ranks[i]\r\n        }));\r\n        addNotification(NOTIFICATIONS.RANK_UP, `Congratulations! You've reached ${ranks[i].name} rank!`);\r\n        break;\r\n      }\r\n    }\r\n  };\r\n\r\n  const checkAchievements = () => {\r\n    const { modulesCompleted, quizzesTaken, averageScore, completedModules } = userProgress;\r\n    const unlockedAchievements = [];\r\n\r\n    // First Steps\r\n    if (modulesCompleted >= 1 && !hasAchievement(ACHIEVEMENTS.FIRST_STEPS.id)) {\r\n      unlockedAchievements.push(ACHIEVEMENTS.FIRST_STEPS);\r\n    }\r\n\r\n    // Quick Learner\r\n    if (modulesCompleted >= 3 && !hasAchievement(ACHIEVEMENTS.QUICK_LEARNER.id)) {\r\n      unlockedAchievements.push(ACHIEVEMENTS.QUICK_LEARNER);\r\n    }\r\n\r\n    // Knowledge Seeker\r\n    if (completedModules.length === 7 && !hasAchievement(ACHIEVEMENTS.KNOWLEDGE_SEEKER.id)) {\r\n      unlockedAchievements.push(ACHIEVEMENTS.KNOWLEDGE_SEEKER);\r\n    }\r\n\r\n    // Quiz Master\r\n    if (quizzesTaken >= 5 && averageScore >= 90 && !hasAchievement(ACHIEVEMENTS.QUIZ_MASTER.id)) {\r\n      unlockedAchievements.push(ACHIEVEMENTS.QUIZ_MASTER);\r\n    }\r\n\r\n    unlockedAchievements.forEach(achievement => {\r\n      addAchievement(achievement);\r\n    });\r\n  };\r\n\r\n  const hasAchievement = (achievementId) => {\r\n    return userProgress.achievements?.some(a => a.id === achievementId) || false;\r\n  };\r\n\r\n  const addAchievement = (achievement) => {\r\n    setUserProgress(prev => {\r\n      const newPoints = prev.totalPoints + achievement.points;\r\n      checkRankProgress(newPoints);\r\n      \r\n      // Update both achievements and badges arrays\r\n      const newAchievements = [...(prev.achievements || []), achievement];\r\n      const newBadges = [...(prev.badges || []), {\r\n        id: achievement.id,\r\n        name: achievement.name,\r\n        description: achievement.description,\r\n        earnedAt: new Date().toISOString()\r\n      }];\r\n      \r\n      return {\r\n        ...prev,\r\n        achievements: newAchievements,\r\n        badges: newBadges,\r\n        totalPoints: newPoints\r\n      };\r\n    });\r\n    addNotification(\r\n      NOTIFICATIONS.ACHIEVEMENT_UNLOCKED,\r\n      `Achievement Unlocked: ${achievement.name} (+${achievement.points} points)`\r\n    );\r\n  };\r\n\r\n  const updateModulesCompleted = async (moduleId) => {\r\n    if (!currentUser || !userProgress) return;\r\n\r\n    // Only update if the module isn't already completed\r\n    if (!userProgress.completedModules.includes(moduleId)) {\r\n      const updatedProgress = {\r\n        ...userProgress,\r\n        modulesCompleted: userProgress.modulesCompleted + 1,\r\n        completedModules: [...userProgress.completedModules, moduleId]\r\n      };\r\n\r\n      try {\r\n        const progressRef = doc(db, 'progress', currentUser.uid);\r\n        await updateDoc(progressRef, updatedProgress);\r\n        setUserProgress(updatedProgress);\r\n        checkAchievements();\r\n        \r\n        addActivity({\r\n          type: 'module_completed',\r\n          title: `Module ${moduleId}`,\r\n          timestamp: new Date()\r\n        });\r\n      } catch (error) {\r\n        console.error('Error updating module completion:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const updateTimeSpent = (minutes) => {\r\n    setUserProgress(prev => ({\r\n      ...prev,\r\n      totalTimeSpent: prev.totalTimeSpent + minutes\r\n    }));\r\n  };\r\n\r\n  const updateQuizStats = async (score, earnedPoints) => {\r\n    if (!currentUser) return;\r\n\r\n    const progressRef = doc(db, 'progress', currentUser.uid);\r\n    const newQuizzesTaken = (userProgress.quizzesTaken || 0) + 1;\r\n    const newAverageScore = Math.round(\r\n      ((userProgress.averageScore || 0) * (userProgress.quizzesTaken || 0) + score) / newQuizzesTaken\r\n    );\r\n    const newHighestScore = Math.max(userProgress.highestScore || 0, score);\r\n    const newTotalPoints = (userProgress.totalPoints || 0) + earnedPoints;\r\n\r\n    const updatedProgress = {\r\n      ...userProgress,\r\n      quizzesTaken: newQuizzesTaken,\r\n      averageScore: newAverageScore,\r\n      highestScore: newHighestScore,\r\n      totalPoints: newTotalPoints\r\n    };\r\n\r\n    await updateDoc(progressRef, updatedProgress);\r\n    setUserProgress(updatedProgress);\r\n    checkAchievements();\r\n  };\r\n\r\n  const addPoints = async (points) => {\r\n    if (!currentUser) return;\r\n\r\n    const progressRef = doc(db, 'progress', currentUser.uid);\r\n    const newPoints = (userProgress.totalPoints || 0) + points;\r\n    \r\n    const updatedProgress = {\r\n      ...userProgress,\r\n      totalPoints: newPoints\r\n    };\r\n\r\n    await updateDoc(progressRef, updatedProgress);\r\n    setUserProgress(updatedProgress);\r\n    checkAchievements();\r\n  };\r\n\r\n  const formatTime = (minutes) => {\r\n    const hours = Math.floor(minutes / 60);\r\n    const mins = minutes % 60;\r\n    return `${hours}h ${mins}m`;\r\n  };\r\n\r\n  const addActivity = (activity) => {\r\n    const newActivity = {\r\n      id: Date.now(),\r\n      description: activity,\r\n      timestamp: new Date()\r\n    };\r\n    setUserProgress(prev => ({\r\n      ...prev,\r\n      recentActivities: [newActivity, ...prev.recentActivities.slice(0, 9)]\r\n    }));\r\n  };\r\n\r\n  const value = {\r\n    userProgress,\r\n    notifications,\r\n    resetProgress,\r\n    updateModulesCompleted,\r\n    updateTimeSpent,\r\n    updateQuizStats,\r\n    addPoints,\r\n    formatTime,\r\n    addActivity,\r\n    hasAchievement,\r\n    checkAchievements,\r\n    loading\r\n  };\r\n\r\n  return (\r\n    <ProgressContext.Provider value={value}>\r\n      {!loading && children}\r\n    </ProgressContext.Provider>\r\n  );\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}